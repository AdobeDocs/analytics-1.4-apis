{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_Populating_an_Import_Job.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mCADR,qCAGA,+FAAgF,uBAAYC,WAAW,KAAvB,6BAAhF,2HACA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,cAGA,eAAIA,WAAW,KACb,MAAS,MADX,kBAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,iBAGA,eAAIA,WAAW,KACb,MAAS,MADX,qFAEwF,uBAAYA,WAAW,MAAvB,2BAFxF,cAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,SAGA,eAAIA,WAAW,KACb,MAAS,MADX,kEAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,QAGA,eAAIA,WAAW,KACb,MAAS,MADX,qFAMN,6TACA,0BAAW,uBAAYA,WAAW,KAAvB,6BAAX,kHAAkM,uBAAYA,WAAW,KAAvB,WAAlM,QAA6P,uBAAYA,WAAW,KAAvB,UAA7P,MACA,sQACA,mBAAG,mBAAQA,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,u4BA6CL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,onBAgBL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,2BAD6C,wBAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-populating-an-import-job-md-996ec30316c9c5922709.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-5-populating-an-import-job\"\n    }}>{`Step 5: Populating an Import Job`}</h1>\n    <p>{`After you create the import job, you can populate it with data using the `}<inlineCode parentName=\"p\">{`Saint.ImportPopulateJob()`}</inlineCode>{` method, which appends row data to an uncommitted SAINT import job and requires the parameters in the following table.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`job`}{`_`}{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The SAINT import job ID to append the row data. Use the returned job ID from the `}<inlineCode parentName=\"td\">{`Saint.ImportCreateJob()`}</inlineCode>{` method.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`page`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The page number, or sequential batch number, for the import.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`row`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An array of row data formatted to match the header columns of the import job.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`If you upload a large amount of data, you can upload it in batches, often referred to as segments, or pages. You must number the pages sequentially `}{`(`}{`either ascending or descending`}{`)`}{` to avoid errors when SAINT processes the job. Remember to start the page numbering from 1, and not 0.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Saint.ImportPopulateJob()`}</inlineCode>{` method returns a status string that indicates if the job successfully processed. Valid return values include `}<inlineCode parentName=\"p\">{`Success`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Failed`}</inlineCode>{`.`}</p>\n    <p>{`In this JJ. Esquire demo application for this article, the following code shows you how to add one record, but two classifications `}{`(`}{`Winter Ski Jacket category and Northface brand`}{`)`}{`, for a single product SKU `}{`(`}{`100241`}{`)`}{`.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Saint.ImportPopulateJob */ \n$data = array( \narray('100241','Winter Ski Jackets','Northface') \n); \nif ($job_id >= 1) { \n$chunked_array = array_chunk($data, 25000); \n$page = 1; \nforeach ($chunked_array as $chunk) { \n$xml = format_rows($job_id, $page, $chunk); \n/* Saint.ImportPopulateJob */ \n$response = sendRequest('Saint.ImportPopulateJob', $xml ); \n$page++; \n//var_dump($response); \n} \n} \n\n/** \n* Format Rows: \n* \n* \n* home page \n* TypeA \n* Rank1 \n* \n* \n*/ \nfunction format_rows($job_id, $page, $rows) { \n$xml = '' . $job_id . '' . $page . ''; \n$xml .= ''; \nforeach ($rows as $r) { \n$xml .= ''; \nforeach($r as $c) { \n$xml .= '' . _xmlentities($c) . ''; \n} \n$xml .= ''; \n} \n$xml .= ''; \nreturn $xml; \n} \n\nfunction _xmlentities ( $string ) { \nreturn str_replace( array( '&', '\"', \"'\", '<', '>' ), array( '&', '\"', ''', '<', '>'), $string); \n} \n?>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Create the row data */ \ncom.omniture.www.Row[] rows = new com.omniture.www.Row[10]; \n\nString[] row = new String[3]; \n\n/* This is the SKU number of the jacket that we tagged in the Tagging article and the data got uploaded via tagging into the report suite.*/ \nrow[0] = \"100241\"; \nrow[1] = \"Winter Ski Jackets\"; \nrow[2] = \"Northface\"; \nrows[0] = new com.omniture.www.Row(); \nrows[0].setRow(row); \n\n/* Import populate job request */ \nString responseImportPopulateJob = port.saintImportPopulateJob(importJobID, 1, rows); \nSystem.out.println(\"saintImportPopulateJob retuned a : \"+responseImportPopulateJob);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_SAINT_API_Overview.md\"\n      }}>{`SAINT API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}