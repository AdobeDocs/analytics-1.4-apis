{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/admin-api-1.3/data_types/overview.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,YADR,aAGA,4GACA,kSACA,mBAAG,uBAAYC,WAAW,KAAvB,sBAAH,MACA,mCACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,iDAAyH,uBAAYA,WAAW,MAAvB,OAAzH,yEAAsP,uBAAYA,WAAW,MAAvB,OAAtP,2HAAya,cAAGA,WAAW,KACnb,KAAQ,uCAD6Z,yBAAza,yCAGA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,qBAApB,iDAAmI,uBAAYA,WAAW,MAAvB,OAAnI,yFAAgR,uBAAYA,WAAW,MAAvB,qBAAhR,UAAwV,uBAAYA,WAAW,MAAvB,OAAxV,kFAEF,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,gCAD6C,gBAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-admin-api-1-3-data-types-overview-md-7371498d91cae951816e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h1>\n    <p>{`The Administration API uses these custom data structures, including enumerated types.`}</p>\n    <p>{`A Data Type defines structure for organizing and containing a specific set of data. Data types can consist of two or more elements, each of which may be an array, enumeration, structure, or \"primitive\" element. Adobe defines data types using the following convention:`}</p>\n    <p><inlineCode parentName=\"p\">{`<namespace>:<type>`}</inlineCode>{` `}</p>\n    <p>{`For example:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`xsd:int`}</inlineCode>{` indicates that the data type is part of the `}<inlineCode parentName=\"li\">{`xsd`}</inlineCode>{` namespace `}{`(`}{`XML Schema Definition`}{`)`}{`, and that the type is `}<inlineCode parentName=\"li\">{`int`}</inlineCode>{` `}{`(`}{`Integer`}{`)`}{`. XML defines certain primitive `}{`(`}{`common`}{`)`}{` data types such as int, string or date. The `}<a parentName=\"li\" {...{\n          \"href\": \"http://www.w3.org/TR/xmlschema11-2/\"\n        }}>{`XML Schema Definition`}</a>{` describes all primitive data types.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`calculated_metric`}</inlineCode>{` indicates that the data type is part of the `}<inlineCode parentName=\"li\">{`tns`}</inlineCode>{` namespace `}{`(`}{`a private Adobe namespace`}{`)`}{`, and that the custom data type is `}<inlineCode parentName=\"li\">{`calculated_metric`}</inlineCode>{`. The `}<inlineCode parentName=\"li\">{`tns`}</inlineCode>{` namespace prefixes all Adobe Marketing Cloud web service custom data types.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../data_types/c_datatypes.md\"\n      }}>{`Data Types`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}