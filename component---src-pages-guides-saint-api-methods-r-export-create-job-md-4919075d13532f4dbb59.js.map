{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/saint-api/methods/r_exportCreateJob.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-guides-saint-api-methods-r-export-create-job-md-4919075d13532f4dbb59.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"exportcreatejob\"\n    }}>{`ExportCreateJob`}</h1>\n    <p>{`Creates a SAINT export job.`}</p>\n    <h2 {...{\n      \"id\": \"saintexportcreatejob-parameters\"\n    }}>{`Saint.ExportCreateJob Parameters`}</h2>\n    <p>{`This file represents classifications for a given relation. Before calling this API, use `}<a parentName=\"p\" {...{\n        \"href\": \"r_getFilters.md#\"\n      }}>{`SAINT.GetFilters`}</a>{` to obtain valid column numbers and names, and filter dates.`}</p>\n    <p>{`After creating an export job, use `}<a parentName=\"p\" {...{\n        \"href\": \"r_checkJobStatus.md#\"\n      }}>{`CheckJobStatus`}</a>{` to determine when the export data is ready for download.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Export data files can be very large. Use `}<a parentName=\"p\" {...{\n        \"href\": \"r_exportGetFileSegment.md#\"\n      }}>{`ExportGetFileSegment`}</a>{` to download the file in pieces `}{`(`}{`segments`}{`)`}{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Parameter`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`campaign`}{`_`}{`filter`}{`_`}{`begin`}{`_`}{`range`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The campaign start date. Include this parameter when `}<inlineCode parentName=\"td\">{`campaign_filter_option = 2`}</inlineCode>{`. Specify the date range using the following format:`}<inlineCode parentName=\"td\">{`<start_date>-<end_date>`}</inlineCode>{`. Provide the date in the following format: `}<inlineCode parentName=\"td\">{`YYYMMDD`}</inlineCode>{`, where: `}<inlineCode parentName=\"td\">{`YYY + 1900`}</inlineCode>{` equals the year `}{`(`}{`For example, 2008 is `}<inlineCode parentName=\"td\">{`108`}</inlineCode>{`)`}{`. `}<inlineCode parentName=\"td\">{`MM`}</inlineCode>{` equals the month number minus 1 `}{`(`}{`January = 00, February = 01, and so on`}{`)`}{`. `}<inlineCode parentName=\"td\">{`DD`}</inlineCode>{` equals the 2 digit day. For example, May 22, 2008 is `}<inlineCode parentName=\"td\">{`1080422`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`campaign`}{`_`}{`filter`}{`_`}{`option`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:int`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The filter option to use for the SAINT export. Supported values include: `}<inlineCode parentName=\"td\">{`0`}</inlineCode>{` : Return all Campaigns `}{`(`}{`No filter`}{`)`}{`  `}<inlineCode parentName=\"td\">{`1`}</inlineCode>{` : `}{`(`}{`Default`}{`)`}{` Return active campaigns `}<inlineCode parentName=\"td\">{`2`}</inlineCode>{` : Return campaigns with the specified begin and end date.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`date`}{`_`}{`filter`}{`_`}{`row`}{`_`}{`start`}{`_`}{`date`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The start date for including rows in the export. Include this parameter when `}<inlineCode parentName=\"td\">{`campaign_filter_option = 1`}</inlineCode>{`. Specify the date using the following format: `}<inlineCode parentName=\"td\">{`Mmm YYYY`}</inlineCode>{`, where: `}<inlineCode parentName=\"td\">{`Mmm`}</inlineCode>{`: A three-character month code. For example, January=Jan, February=Feb, and so on. `}<inlineCode parentName=\"td\">{`YYYY`}</inlineCode>{`: The 4-digit year. For example, September, 2008 is `}<inlineCode parentName=\"td\">{`Sep 2008`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`date`}{`_`}{`filter`}{`_`}{`row`}{`_`}{`end`}{`_`}{`date`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The end date for including rows in the export. Include this parameter when `}<inlineCode parentName=\"td\">{`campaign_filter_option = 1`}</inlineCode>{`. Use the same date range format described for the `}<inlineCode parentName=\"td\">{`date_filter_row_start_date`}</inlineCode>{` parameter.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`email`}{`_`}{`address`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The email address to receive job notifications.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`encoding`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The language encoding to use with the export file. For example, UTF-8.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`relation`}{`_`}{`id`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:int`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The relation ID. You get this ID as a return value from `}<a parentName=\"td\" {...{\n              \"href\": \"r_GetCompatibilityMetrics.md#\"\n            }}>{`GetCompatibilityMetrics`}</a>{`. For example, `}<inlineCode parentName=\"td\">{`53`}</inlineCode>{` is the ID for the \"campaign\" relation.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`report`}{`_`}{`suite`}{`_`}{`array`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`array(xsd:string)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(`}{`Optional`}{`)`}{` The list of report suites on which SAINT exports data.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`row`}{`_`}{`match`}{`_`}{`filter`}{`_`}{`empty`}{`_`}{`column`}{`_`}{`name`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(`}{`Optional`}{`)`}{` The column ID number of the column that SAINT checks for empty data cells. If this parameter is specified, the export contains only keys which have empty values for the provided column. You get the column ID by calling `}<a parentName=\"td\" {...{\n              \"href\": \"r_getFilters.md#\"\n            }}>{`GetFilters`}</a>{` for a specific relation id.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`row`}{`_`}{`match`}{`_`}{`filter`}{`_`}{`match`}{`_`}{`column`}{`_`}{`name`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(`}{`Optional`}{`)`}{` The column name that SAINT checks for cell values that match the value specified in the `}<inlineCode parentName=\"td\">{`row_match_filter_match_column_value`}</inlineCode>{` parameter.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`row`}{`_`}{`match`}{`_`}{`filter`}{`_`}{`match`}{`_`}{`column`}{`_`}{`value`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(`}{`Optional`}{`)`}{` Include this parameter when using the `}<inlineCode parentName=\"td\">{`row_match_filter_match_column_name`}</inlineCode>{` parameter. If the cell value matches the value, SAINT includes it in the export.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`select`}{`_`}{`all`}{`_`}{`rows`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:int`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(`}{`Optional`}{`)`}{` Specifies whether to include all data rows in the export `}{`(`}{`up to the 50,000 row limit`}{`)`}{`. Supported values include: `}<inlineCode parentName=\"td\">{`0`}</inlineCode>{`: Do not include all rows in the export. `}<inlineCode parentName=\"td\">{`1`}</inlineCode>{`: `}{`(`}{`Default`}{`)`}{` Include all rows in the export.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`select`}{`_`}{`number`}{`_`}{`of`}{`_`}{`rows`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:int`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`(`}{`Optional`}{`)`}{` Limits the number of data rows in the export file to the specified value. The default limit is 50,000. Include this parameter when `}<inlineCode parentName=\"td\">{`select_all_rows = 0`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`quote`}{`_`}{`output`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Whether to quote the output.  In some cases, turning this on helps with duplicate keys containing whitespace.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"saintexportcreatejob-response\"\n    }}>{`Saint.ExportCreateJob Response`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`xsd:string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The Job ID associated with your export request.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"../sample_code/r_exportCreateJob_sample.md#\"\n      }}>{`ExportCreateJob Request`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../methods/c_saint_methods.md\"\n      }}>{`Methods`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}