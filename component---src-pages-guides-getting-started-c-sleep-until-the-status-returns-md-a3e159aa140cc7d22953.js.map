{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_sleep_until_the_status_returns.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yCADR,2CAGA,gNACA,mBAAG,mBAAQC,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,89EAkFL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,ygBAWL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,yeAWL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,oCAD6C,iCAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-sleep-until-the-status-returns-md-a3e159aa140cc7d22953.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-3-sleep-until-the-status-returns\"\n    }}>{`Step 3: Sleep Until the Status Returns`}</h1>\n    <p>{`There may be a long delay before you can get the report data or call the method to retrieve it. You need to wait to pick up the report until the request returns a status of “completed”.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/**\n*  1.Repeatedly check on request in the queue\n*      a) check frequency based on $max_checks and $check_wait_seconds parameters    \n*  2.Returns the report when ready\n*/  \n$attempts = 0;\n$nextSleepSeconds = 0;\n$max_checks=10;\n$check_wait_seconds=10;\n$max_report_checks = 500; /* Ultimate system maximum checks on the report queue */\n$reportDone = false;\nwhile( $nextSleepSeconds = nextSleep( $attempts, $max_checks, $check_wait_seconds) )\n{\n    if($debug) echo(\"sleeping for... $nextSleepSeconds seconds.\\\\n\");\n    sleep($nextSleepSeconds);        \n\n    /* Check on the DW request */\n    $result = sendRequest('DataWarehouse.CheckRequest', \narray('Request_Id'=>$request_id) );\n    var_dump($result);    \n    echo \"check on DW request = \" . $result['message'];\n    $status = $result['message'];\n    if($debug) echo(\"Request Status: \". $status .\"\\\\n\");\n\n    /* Check if report is ready */\n    if($status == $REPORT_STATUS_COMPLETED)\n    {\n /* Report Completed */\n     $reportDone = true;\n     break;          \n  \n    } else if( strstr($status, 'fail') || strstr($status, 'error') ){\n /* Report failed, exit out */\n     throw new Exception(\"dataWarehouse checkRequest(): \" . $status );//. \" - \". $response['error_msg'], 0);                 \n    \n    } else {\n /* Report is not ready yet */\n     if($debug) echo $status . \"\\\\n\";\n    }\n    $attempts++;\n}\n\n/* Check if the report completed or timed-out */\nif($reportDone)\n{\n    /* Report has Completed */\n          echo \"DW report is done \";    \n\n} else { \n    /* Report is not ready yet */   \n          echo(\"DataWarehouse: Report response timeout.\");\n          exit(); \n}\n\n/**\n* Determines next sleep time for report queue checking.\n*      Uses a backing off algorithm so that long requests don't have to check as often.\n*\n* @param    $attempts     int    The number of checks so far\n* @param    $max_checks    int User specified maximum number of checks\n*\n* @return    FALSE to stop checking OR the number of seconds for the next sleep\n*/\nfunction nextSleep( $attempts, $max_checks, $check_wait_seconds ){\n    global $max_report_checks;\n    if( $max_checks <= 0){\n     if($attempts >= $max_report_checks)\n         return -1;\n         \n     if($attempts <= 4 ){\n         return 3;\n     }else{\n         return min( ($attempts - 4) * 3, 30);           \n     } \n    }else{\n     if($attempts < $max_checks)\n         return $check_wait_seconds;\n    }\n    return FALSE;\n}       \n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Sleep till the dataWarehouseCheckRequest method returns Waiting to Start or In Progress messages */\nwhile(request.getMessage().equalsIgnoreCase(\"Waiting to Start\") || request.getMessage().equalsIgnoreCase(\"In Progress\")) \n            {\n                Thread.sleep(10000);\n                System.out.println(\"Waiting for completed status...\"+request.getMessage());\n\n/* Store the status of the Data Warehouse request */\n                request = port.dataWarehouseCheckRequest(reportID);\n            }\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`C`}{`#`}{` Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Sleep till the dataWarehouseCheckRequest method returns Waiting to Start or In Progress messages */\nwhile (request.message.Equals(\"Waiting to Start\") || request.message.Equals(\"In Progress\"))\n            {\n                Thread.Sleep(10000);\n                Console.WriteLine(\"Waiting for completed status...\" + request.message);\n\n/* Store the status of the Data Warehouse request */\n                request = client.DataWarehouseCheckRequest(reportID);\n            }\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_data_warehouse_API_tutorial.md\"\n      }}>{`Data Warehouse API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}