{"version":3,"file":"9919b502-0997a0d8a5e2ddf0951d.js","mappings":"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","sources":["webpack://analytics-1.4-apis/./node_modules/@adobe/gatsby-theme-aio/src/components/SideNav/index.js"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link as GatsbyLink } from 'gatsby';\nimport { isBrowser,   findSelectedTopPage,\n  findSelectedTopPageMenu,\n  rootFix,\n  rootFixPages, isExternalLink, getExternalLinkProps, MOBILE_SCREEN_WIDTH } from '../../utils';\nimport { css } from '@emotion/react';\nimport classNames from 'classnames';\nimport '@spectrum-css/sidenav';\nimport nextId from 'react-id-generator';\nimport { ChevronRight, CheckMark } from '../Icons';\nimport { AnchorButton } from '../AnchorButton';\n\n\nconst getSelectedTabIndex = (location, pages) => {\n  const pathWithRootFix = rootFix(location.pathname);\n  const pagesWithRootFix = rootFixPages(pages);\n\n  let selectedIndex = pagesWithRootFix.indexOf(\n    findSelectedTopPage(pathWithRootFix, pagesWithRootFix)\n  );\n  let tempArr = pathWithRootFix.split('/');\n  let inx = tempArr.indexOf('use-cases');\n  if (selectedIndex === -1 && inx > -1) {\n    tempArr[inx + 1] = 'agreements-and-contracts';\n    tempArr[inx + 2] = 'sales-proposals-and-contracts';\n    if (tempArr[inx + 3] == undefined) {\n      tempArr.push('');\n    }\n    let tempPathName = tempArr.join('/');\n    selectedIndex = pagesWithRootFix.indexOf(findSelectedTopPage(tempPathName, pagesWithRootFix));\n  }\n  // Assume first item is selected\n  if (selectedIndex === -1) {\n    selectedIndex = 0;\n  }\n  return selectedIndex;\n};\n\nconst SideNav = ({versions, mainNavPages, selectedPages, selectedSubPages, setShowSideNav, location }) => {\n  const [expandedPages, setExpandedPages] = useState([]);\n  const [expandedMenus, setExpandedMenus] = useState([]);\n  const [sideNavClick, setSideNavClick] = useState(false);\n  const [mobileView, setMobileView] = useState(false);\n  const [selectedMenuItem, setSelectedMenuItem] = useState({});\n\n  // If one page has header enabled, use header navigation type for all navigation items\n  const hasHeader = selectedSubPages.some(page => page.header);\n  const isMultiLevel = selectedSubPages.some(page => page?.pages?.length > 0);\n  const ref = useRef(null);\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      // reset it when user did not click on the side nav.\n      setSideNavClick(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    const index = getSelectedTabIndex(location, mainNavPages);\n    const pathWithRootFix = rootFix(location.pathname);\n    setSelectedMenuItem(findSelectedTopPageMenu(pathWithRootFix, mainNavPages[index]));\n  }, [location.pathname])\n\n  useEffect(() => {\n\n    if (window.innerWidth <= 1280) {\n      setMobileView(true);\n    } else {\n      setMobileView(false);\n    }\n    window.addEventListener('resize', () => {\n      if (window.innerWidth <= 1280) {\n        setMobileView(true);\n      } else {\n        setMobileView(false);\n      }\n    });\n  }, []);\n\n  const renderSubtree = (pages, level) =>\n    pages\n      .filter(page => page.title)\n      .map((page, index) => {\n        const isSelected = selectedPages.find(selectedItem => selectedItem === page);\n        const id = nextId();\n        const pageHref = page.href ? page.href : page.menu[0].href;\n\n        if (isSelected && !sideNavClick && !expandedPages.includes(pageHref)) {\n          setExpandedPages(pages => [...pages, pageHref]);\n        }\n\n        return (\n          <li\n            key={index}\n            role=\"treeitem\"\n            aria-level={level}\n            aria-expanded={page.header || expandedPages.includes(pageHref)}\n            css={css`\n              &:not(.is-expanded) .spectrum-SideNav {\n                display: none;\n              }\n\n              &:first-of-type .spectrum-SideNav-heading {\n                margin-top: 0;\n              }\n            `}\n            className={classNames([\n              'spectrum-SideNav-item',\n              { 'is-expanded': page.header || expandedPages.includes(pageHref) },\n              { 'is-selected': selectedPages[selectedPages.length - 1] === page && isSelected },\n            ])}>\n            {page.header ? (\n              <h2 className=\"spectrum-SideNav-heading\" id={id}>\n                {page.title}\n              </h2>\n            ) : isExternalLink(pageHref) ? (\n              <a\n                {...getExternalLinkProps(pageHref)}\n                href={pageHref}\n                className=\"spectrum-SideNav-itemLink\">\n                {page.title}\n              </a>\n            ) : (\n              <GatsbyLink\n                onClick={() => {\n                  setSideNavClick(true);\n                  if (page?.pages?.length && !page.header) {\n                    if (expandedPages.includes(pageHref)) {\n                      setExpandedPages(pages => pages.filter(href => href !== pageHref));\n                    } else {\n                      setExpandedPages([...expandedPages, pageHref]);\n                    }\n                  } else {\n                    setShowSideNav(false);\n                  }\n                }}\n                to={pageHref}\n                className=\"spectrum-SideNav-itemLink\">\n                {page.title}\n                {page.pages && page.pages.length > 0 ? (\n                  <ChevronRight\n                    css={css`\n                      position: absolute;\n                      right: 0px;\n                      width: var(--spectrum-global-dimension-size-125) !important;\n                      height: var(--spectrum-global-dimension-size-125) !important;\n                      margin-left: var(--spectrum-global-dimension-size-100);\n                      transition: transform var(--spectrum-global-animation-duration-100)\n                        ease-in-out;\n                      ${expandedPages.includes(pageHref) && `transform: rotate(90deg);`}\n                    `}\n                  />\n                ) : null}\n              </GatsbyLink>\n            )}\n            {page.pages && (\n              <ul\n                className=\"spectrum-SideNav\"\n                role=\"group\"\n                css={css`\n                  ${level > 1\n                    ? `\n                    & > li > a {\n                      padding-left: calc(${\n                        level + 1\n                      } * var(--spectrum-global-dimension-size-150)) !important;\n                    }\n                  `\n                    : ''}\n                `}\n                {...(page.heading ? { 'aria-labelledby': id } : {})}>\n                {renderSubtree(page.pages, level + 1)}\n              </ul>\n            )}\n          </li>\n        );\n      });\n\n  const renderMenuTree = (pages, level) =>\n    pages\n      .filter(page => page.title)\n      .map((page, index) => {\n        const isSelected = selectedPages.find(selectedItem => selectedItem === page);\n        const id = nextId();\n        const pageHref = page.href ? page.href : `#${page.title.toLowerCase()}`;\n\n        if (isSelected && !sideNavClick && !expandedMenus.includes(pageHref)) {\n          setExpandedMenus(pages => [...pages, pageHref]);\n        }\n\n        return (\n          <li\n            key={index}\n            role=\"treeitem\"\n            aria-level={level}\n            aria-expanded={page.header || expandedMenus.includes(pageHref)}\n            css={css`\n              &:not(.is-expanded) .spectrum-SideNav {\n                display: none;\n              }\n\n              &:first-of-type .spectrum-SideNav-heading {\n                margin-top: 0;\n              }\n            `}\n            className={classNames([\n              'spectrum-SideNav-item',\n              { 'is-expanded': page.header || expandedMenus.includes(pageHref) },\n              { 'is-selected': selectedPages[selectedPages.length - 1] === page && isSelected },\n            ])}>\n            {page.header ? (\n              <h2 className=\"spectrum-SideNav-heading\" id={id}>\n                {page.title}\n              </h2>\n            ) : isExternalLink(pageHref) ? (\n              <a\n                {...getExternalLinkProps(pageHref)}\n                href={pageHref}\n                className=\"spectrum-SideNav-itemLink\">\n\n                {page.title}\n              </a>\n            ) : (\n              <GatsbyLink\n                onClick={() => {\n                  setSideNavClick(true);\n                  if (page?.menu?.length && !page.header) {\n                    if (expandedMenus.includes(pageHref)) {\n                      setExpandedMenus(pages => pages.filter(href => href !== pageHref));\n                    } else {\n                      setExpandedMenus([...expandedMenus, pageHref]);\n                    }\n                  } else {\n                    setShowSideNav(false);\n                  }\n                }}\n                to={pageHref}\n                className=\"spectrum-SideNav-itemLink\">\n                { selectedMenuItem === page  && <CheckMark /> }\n                {page.title}\n                {page.menu && page.menu.length > 0 ? (\n                  <ChevronRight\n                    css={css`\n                      position: absolute;\n                      right: 0px;\n                      width: var(--spectrum-global-dimension-size-125) !important;\n                      height: var(--spectrum-global-dimension-size-125) !important;\n                      margin-left: var(--spectrum-global-dimension-size-100);\n                      transition: transform var(--spectrum-global-animation-duration-100)\n                        ease-in-out;\n                      ${expandedMenus.includes(pageHref) && `transform: rotate(90deg);`}\n                    `}\n                  />\n                ) : null}\n              </GatsbyLink>\n            )}\n            {page.menu && (\n              <ul\n                className=\"spectrum-SideNav\"\n                role=\"group\"\n                css={css`\n                  ${level > 1\n                    ? `\n                    & > li > a {\n                      padding-left: calc(${\n                        level + 1\n                      } * var(--spectrum-global-dimension-size-150)) !important;\n                    }\n                  `\n                    : ''}\n                `}\n                {...(page.heading ? { 'aria-labelledby': id } : {})}>\n                {renderMenuTree(page.menu, level + 1)}\n              </ul>\n            )}\n          </li>\n        );\n      });\n\n  return (\n    <nav\n      ref={ref}\n      id=\"side-menu\"\n      role=\"navigation\"\n      aria-label=\"Primary\"\n      css={css`\n        margin-top: var(--spectrum-global-dimension-size-800);\n\n        @media screen and (max-width: ${MOBILE_SCREEN_WIDTH}) {\n          margin-top: var(--spectrum-global-dimension-size-400);\n        }\n      `}>\n      <div\n        css={css`\n          box-sizing: border-box;\n          padding: var(--spectrum-global-dimension-size-400);\n          overflow: auto;\n          height: calc(100vh - var(--spectrum-global-dimension-size-800));\n        `}>\n        {/* The section below is the alternative top menu */}\n        {mobileView && (\n          <>\n            <p>Global Navigation</p>\n            <ul\n              role=\"tree\"\n              aria-label=\"Global Navigation\"\n              className={classNames('spectrum-SideNav', 'spectrum-SideNav--multiLevel')}>\n              {versions && renderMenuTree([{title: 'Versions', menu: versions}], 1)}\n              {renderMenuTree(mainNavPages, 1)}\n              <AnchorButton variant=\"primary\" href=\"/console\" id={'consoleId'} tabIndex=\"0\">\n                Console\n              </AnchorButton>\n            </ul>\n            {selectedSubPages.length > 0 && (\n              <>\n                <hr></hr>\n                <p>Table of contents</p>\n              </>\n            )}\n          </>\n        )}\n\n        {/* The section below is what used to be the sidenav with documentation subpages */}\n        {selectedSubPages.length > 0 && (\n          <ul\n            role=\"tree\"\n            aria-label=\"Table of contents\"\n            className={classNames('spectrum-SideNav', {\n              'spectrum-SideNav--multiLevel': isMultiLevel && !hasHeader,\n            })}>\n            {renderSubtree(selectedSubPages, 1)}\n          </ul>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nSideNav.propTypes = {\n  mainNavPages: PropTypes.array,\n  versions: PropTypes.array,\n  selectedPages: PropTypes.array,\n  selectedSubPages: PropTypes.array,\n  setShowSideNav: PropTypes.func,\n};\n\nexport { SideNav };\n"],"names":["SideNav","versions","mainNavPages","selectedPages","selectedSubPages","setShowSideNav","location","useState","expandedPages","setExpandedPages","expandedMenus","setExpandedMenus","sideNavClick","setSideNavClick","mobileView","setMobileView","selectedMenuItem","setSelectedMenuItem","hasHeader","some","page","header","isMultiLevel","pages","length","ref","useRef","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","index","pathWithRootFix","rootFix","pathname","pagesWithRootFix","rootFixPages","selectedIndex","indexOf","findSelectedTopPage","tempArr","split","inx","undefined","push","tempPathName","join","getSelectedTabIndex","findSelectedTopPageMenu","window","innerWidth","renderMenuTree","level","filter","title","map","isSelected","find","selectedItem","id","nextId","pageHref","href","toLowerCase","includes","key","role","css","className","classNames","isExternalLink","getExternalLinkProps","onClick","menu","to","CheckMark","ChevronRight","heading","MOBILE_SCREEN_WIDTH","A","variant","tabIndex","renderSubtree"],"sourceRoot":""}