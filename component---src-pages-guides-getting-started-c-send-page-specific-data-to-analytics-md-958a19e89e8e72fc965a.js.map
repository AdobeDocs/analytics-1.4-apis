{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_Send_Page-Specific_Data_to_Analytics.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,+CADR,iDAGA,sLACA,kNACA,mBAAG,mBAAQC,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,65CAgEL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,u1BA+BL,yJAA0I,uBAAYA,WAAW,KAAvB,WAA1I,iEAA8P,uBAAYA,WAAW,KAAvB,WAA9P,qDACA,mBAAG,mBAAQA,WAAW,KAAnB,SAAH,UAAsD,cAAGA,WAAW,IAChE,KAAQ,4DAD0C,4BAAtD,kDAGA,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,gCAD6C,iCAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-send-page-specific-data-to-analytics-md-958a19e89e8e72fc965a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-3-send-page-specific-data-to-analytics\"\n    }}>{`Step 3: Send Page-Specific Data to Analytics`}</h1>\n    <p>{`Now that the page-specific analytics data for the JJ. Esquire demo application has been formatted within XML tags, you are ready to send the data to Analytics.`}</p>\n    <p>{`The code below first formats the HTTP POST headers and appends the XML formatted Analytics data. Next, it opens a URL connection to the host for Analytics and sends the HTTP POST request.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Send the analytics data to SiteCatlyst */ \nsendPOSTRequest($host, $xmlData); \n\n/** \n* Sends hit-level data to Analytics. \n* @param $host - the host name for Analytics data collection \n* @param $xml - an associative array containing the properties of the hit-level data beacon \n*/ \nfunction sendPOSTRequest($host, $xml) \n{ \n/* Create POST, Host and Content-Length headers */ \n$head = \"POST /b/ss//6 HTTP/1.0\\\\n\"; \n$head .= \"Host: $host\\\\n\"; \n$head .= \"Content-Length: \" . (string)strlen($xml) . \"\\\\n\\\\n\"; \n/* combine the head and XML */ \n$request = $head . $xml; \n$fp = fsockopen($host, 80, $errno, $errstr, 30); \necho \"Opening connection to $host\\\\n\"; \nif ($fp) { \n/* send data */ \nfwrite($fp, $request); \necho \"Sending data...\\\\n$request\\\\n\"; \n/* get response */ \n$response = \"\"; \nwhile (!feof($fp)) { \n$response .= fgets($fp, 1028); \n} \nfclose($fp); \n/* display results */ \necho \"RESULTS:\\\\n\"; \nprint_r($response); \necho \"\\\\n\"; \n/* check for errors */ \nif (preg_match(\"/status\\\\>FAILURE\\\\<\\\\/status/im\", $response)) { \necho \"\nFailure\n\\\\n\"; \necho \"\nNote the reason tag in the response, fix and try again.\\\\n\"; \n} else { \n\n/* Success */ \nreturn true; \n} \n} else { \necho \"\n\nCouldn't open port to Analytics servers\n\\\\n\"; \nif (!$rsid) { \necho \"\nNo report suite specified\n\\\\n\"; \n} else { \necho \"\n$errstr ($errno)\n\n\\\\n\"; \n} \n} \nreturn false; \n} \n//end: sendPOSTRequest\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`URL url = null; \nURLConnection urlConn = null; \nDataOutputStream printout = null; \nBufferedReader input = null; \nString u = \"http:///b/ss//6 HTTP/1.0\"; \nString tmp = null; \n\nurl = new URL( u ); \nurlConn = url.openConnection(); \nurlConn.setDoInput( true ); \nurlConn.setDoOutput( true ); \nurlConn.setUseCaches( false ); \nurlConn.setRequestProperty( \"Content-Type\", \"application/x-www-form-urlencoded\" ); \n\nprintout = new DataOutputStream(urlConn.getOutputStream()); \nprintout.writeBytes( di.toString() ); \nprintout.flush(); \nprintout.close(); \n\ninput = new BufferedReader( new InputStreamReader(urlConn.getInputStream( ) ) ); \n\nSystem.out.println( di ); \n\nSystem.out.println(\"Response from server is: \"); \nwhile( null != ( ( tmp = input.readLine() ) ) ) \n{ \nSystem.out.println(tmp); \n} \nprintout.close(); \ninput.close();\n`}</code></pre>\n    <p>{`When the Data Insertion API receives HTTP POST data, it performs basic XML tag validation. If it finds an error, the API returns a `}<inlineCode parentName=\"p\">{`Failure`}</inlineCode>{` response. If it does not find any errors, the API returns a `}<inlineCode parentName=\"p\">{`Success`}</inlineCode>{` response and the data is queued for processing.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` View `}<a parentName=\"p\" {...{\n        \"href\": \"../data-insertion-api/reference/r_post_response_codes.md\"\n      }}>{`HTTP POST response codes`}</a>{` for details about all of the response codes.`}</p>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_Data_Insertion_Overview.md\"\n      }}>{`Data Insertion API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}