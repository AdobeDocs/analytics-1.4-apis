{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_Add_Data_to_the_Data_Source.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,sCADR,wCAGA,kGAAmF,uBAAYC,WAAW,KAAvB,+BAAnF,QAAkK,uBAAYA,WAAW,KAAvB,gCAAlK,cACA,eACE,GAAM,gCADR,iCAGA,yDAA0C,uBAAYA,WAAW,KAAvB,eAA1C,SAA0G,uBAAYA,WAAW,KAAvB,QAA1G,qBAA+K,uBAAYA,WAAW,KAAvB,eAA/K,4DACA,mBAAG,mBAAQA,WAAW,KAAnB,SAAH,+HACA,kYACA,wHAAyG,uBAAYA,WAAW,KAAvB,iBAAzG,yCACA,mBAAG,mBAAQA,WAAW,KAAnB,SAAH,iEAA6G,uBAAYA,WAAW,KAAvB,iBAA7G,gHACA,eACE,GAAM,6BADR,8BAGA,gOAAiN,uBAAYA,WAAW,KAAvB,6BAAjN,mCAAyT,uBAAYA,WAAW,KAAvB,+BAAzT,QAAwY,uBAAYA,WAAW,KAAvB,gCAAxY,cACA,qOACA,mBAAG,mBAAQA,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,4yCAkDL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,mzDAqCL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,8BAD6C,+BAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-add-data-to-the-data-source-md-f9b36979f078c4ada8d5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-2-add-data-to-the-data-source\"\n    }}>{`Step 2: Add Data to the Data Source`}</h1>\n    <p>{`Once the data source is created, you can add data to it by using either the `}<inlineCode parentName=\"p\">{`DataSource.BeginDataBlock()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`DataSource.AppendDataBlock()`}</inlineCode>{` methods.`}</p>\n    <h2 {...{\n      \"id\": \"define-the-method-parameters\"\n    }}>{`Define the Method Parameters`}</h2>\n    <p>{`Each of these methods requires the `}<inlineCode parentName=\"p\">{`columnNames`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`rows`}</inlineCode>{` parameters. The `}<inlineCode parentName=\"p\">{`columnNames`}</inlineCode>{` parameter is an array of headers for the report suite.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Remember that you can get the headers from the optional data template downloaded using the Data Source Activation Wizard.`}</p>\n    <p>{`The rows parameter is an array of the data you want to import. The code following this explanation imports the revenue associated with a Purchase by Phone event in the column for event 1 and the date that the transaction took place. These two values are the additional data that you are uploading for an existing product and a transaction ID in your report suite.`}</p>\n    <p>{`For this JJ. Esquire demo application, the Product column contains the product SKU number and the `}<inlineCode parentName=\"p\">{`transactionID`}</inlineCode>{` column contains the transaction ID.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` You may need to ask your Adobe representative to enable the `}<inlineCode parentName=\"p\">{`transactionID`}</inlineCode>{` for recording. You can check whether the variable is enabled in Admin `}{`>`}{` Data Sources `}{`>`}{` Manage.`}</p>\n    <h2 {...{\n      \"id\": \"delay-the-data-processing\"\n    }}>{`Delay the Data Processing`}</h2>\n    <p>{`When the Adobe Experience Cloud creates a new data source, it reserves space on an FTP server for the data upload. Since this can take a few minutes to create, you must create a delay after calling the `}<inlineCode parentName=\"p\">{`DataSource.SetupGeneric()`}</inlineCode>{` method and before calling the `}<inlineCode parentName=\"p\">{`DataSource.BeginDataBlock()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`DataSource.AppendDataBlock()`}</inlineCode>{` methods.`}</p>\n    <p>{`The following PHP code defines a 180 seconds `}{`(`}{`3 minutes`}{`)`}{` delay while the associated Java code defines a 180000 millisecond `}{`(`}{`3 minutes`}{`)`}{` delay while the FTP space is being provisioned.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Sleep 3 minutes while the FTP space is being provisioned \nsleep(180); \n\n/* DataSource.BeginDataBlock - sends data to Analytics using a DataSource */ \n$blockName = 'OfflineRevenueBlock1'; \n$colNameArray = array('Date','Product','Event 2', 'transactionID'); \n$rowData = array( \narray('1/13/2011','100302','455','003456'), \narray('1/14/2011','100303','455','003456') \n); \n\n/* Set the endOfBlock to 0 to continue appending data. */ \n$endOfBlock=â0â; \n\n$params = array( \n'blockName'=>$blockName, \n'dataSourceID'=>$dsId, \n'reportSuiteID'=>$rsId, \n'columnNames'=>$colNameArray, \n'rows'=>$rowData, \n'endOfBlock'=>$endOfBlock \n); \n\n$result = sendRequest('DataSource.BeginDataBlock', $params ); \n\n$blockID = $result['blockID']; \nvar_dump($result); \nsleep(3); \n\n/* DataSource.AppendDataBlock - sends data (continued) to Analytics using a DataSource */ \n$rowData = array( \narray('1/11/2011','100300','455','003456'), \narray('1/12/2011','100301','455','003456') \n); \n\n/* Set the endOfBlock to '' to stop appending data. */ \n$endOfBlock=''; \n$params = array( \n'blockID'=>$blockID, \n'dataSourceID'=>$dsId, \n'reportSuiteID'=>$rsId, \n'rows'=>$rowData, \n'endOfBlock'=>$endOfBlock \n); \n\n$result = sendRequest('DataSource.AppendDataBlock', $params ); \nvar_dump($result); \nsleep(3); \n?>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Sleep 3 minutes while the FTP space is being provisioned \nThread.sleep(180000); \n\n/* DataSource.BeginDataBlock - Submits the first HTTP data block in the current Data Sources data submission */ \nString blockName = \"OfflineRevenueBlock1\"; \nString[] columnNames = new String[4]; \ncolumnNames[0] = \"Date\"; \ncolumnNames[1] = \"Product\"; \ncolumnNames[2] = \"Event 2\"; \ncolumnNames[3] = \"transactionID\"; \n\n/* The SKU number and the transaction ID are the same that were created in the tagging article. */ \nString[][] rows = new String[][]{\n{\"1/13/2011\",\"100302\",\"455\",\"003456\"}, {\"1/14/2011\",\"100303\",\"455\",\"003456\"}\n}; \n\n/* Set the endOfBlock to an empty string to signify end of block and set it to false to continue appending data. */ \nString endOfBlock = \"false\"; \njavax.xml.rpc.holders.IntHolder blockID = new javax.xml.rpc.holders.IntHolder(); \njavax.xml.rpc.holders.IntHolder fileID = new javax.xml.rpc.holders.IntHolder(); \njavax.xml.rpc.holders.StringHolder status = new javax.xml.rpc.holders.StringHolder(); \n\nport.dataSourceBeginDataBlock(blockName, columnNames, Integer.toString(responsedataSourceSetupGeneric.getDataSourceID()), endOfBlock, reportSuiteID, rows, blockID, fileID, status); \n\nThread.sleep(3000); \n\nSystem.out.println(\"Returned value of blockID is: \"+blockID.value+\" and status is: \"+status.value); \n\n/*DataSource.AppendDataBlock - Appends an additional HTTP data block to a Data Sources data submission. */ \nrows = new String[][]{\n{\"1/11/2011\",\"100300\",\"455\",\"003456\"}, {\"1/12/2011\",\"100301\",\"455\",\"003456\"}\n}; \n\nport.dataSourceAppendDataBlock(blockID.value, Integer.toString(responsedataSourceSetupGeneric.getDataSourceID()), endOfBlock, reportSuiteID, rows, fileID, status); \n\nSystem.out.println(\"Returned value of blockID is: \"+blockID.value+\" and status is: \"+status.value);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_Data_Sources_Overview.md\"\n      }}>{`Data Sources API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}