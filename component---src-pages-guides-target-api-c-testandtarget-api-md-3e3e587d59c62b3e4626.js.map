{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/target-api/c_testandtarget_api.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,YADR,aAGA,wGACA,sFACA,eACE,GAAM,4CADR,6CAGA,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAnB,wBAAnB,mUACA,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAnB,SAAnB,wNAGJ,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,qCAApB,qNAEF,eACE,GAAM,uCADR,wCAGA,mIAAoH,cAAGA,WAAW,IAC9H,KAAQ,qCADwG,iBAApH,+DAEyF,uBAAYA,WAAW,KAAvB,kBAFzF,2BAGA,qBAAK,iBAAMA,WAAW,OAAjB,qIAWTJ,EAAWK,gBAAiB","file":"component---src-pages-guides-target-api-c-testandtarget-api-md-3e3e587d59c62b3e4626.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h1>\n    <p>{`The Target API lets you programmatically retrieve data for your Target campaigns.`}</p>\n    <p>{`Target supports the REST interface only. SOAP is not supported.`}</p>\n    <h2 {...{\n      \"id\": \"profile-passing-and-offline-conversation\"\n    }}>{`Profile Passing and Offline Conversation`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Pass a User Profile:`}</strong>{` Use the profile passing API to pass third-party segmentation data into Test&Target `}{`(`}{`T&T`}{`)`}{` as profile attributes for targeting. This lets you use Test&Target to target content based on segmentation data from analytics vendors, as long as you know the T&T ID for the user to which the passed-in data belongs.`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note:`}</strong>{` Using the Test&Target ID is preferred, but the API also supports using a third-party ID `}{`(`}{`assuming the ID is already stored in Test&Target`}{`)`}{`. Contact your Account Representative for further details.`}</p>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Map a Third-Party User ID to T&T:`}</strong>{` Use the Offline Conversion API to associate a visitor ID in your system with a Test&Target visitor ID. Doing this lets you add additional profile information to the visitor's Test&Target persistent profile.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"associate-a-third-party-campaign-id\"\n    }}>{`Associate a Third-Party Campaign ID`}</h2>\n    <p>{`You can associate a third-party ID with a T&T campaign only when creating the campaign programmatically (See `}<a parentName=\"p\" {...{\n        \"href\": \"campaign_copy/r_campaign_copy.md#\"\n      }}>{`campaign_copy`}</a>{`). To do so, specify the appropriate third-party ID in the `}<inlineCode parentName=\"p\">{`<thirdPartyId>`}</inlineCode>{` element. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<campaign>\n   <name>Example REST Campaign</name>\n   <thirdPartyId>extID501</3rdPartyId>\n   <branches>\n   ...\n</campaign>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}