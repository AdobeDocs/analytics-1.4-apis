{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/admin-api-1.3/samples/c_api_admin_sample.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,eADR,gBAGA,oIACA,iLACA,wKAAyJ,cAAGC,WAAW,IACnK,KAAQ,2CAD6I,2CAAzJ,gKAGA,qBAAK,iBAAMA,WAAW,OAAjB,0rEAyETJ,EAAWK,gBAAiB","file":"component---src-pages-guides-admin-api-1-3-samples-c-api-admin-sample-md-760d7f748da4c54b797b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sample-code\"\n    }}>{`Sample Code`}</h1>\n    <p>{`This topic describes the data structures, including enumerated types, used by the Administration web service.`}</p>\n    <p>{`The following code is for demonstration purposes only. Please use your own values, names, file locations, and so on, as you prepare code for your company.`}</p>\n    <p>{`The code below requires the NuSOAP and cURL PHP classes. For details on the setup and requirements for NuSOAP please consult the NuSOAP Web site: `}<a parentName=\"p\" {...{\n        \"href\": \"http://sourceforge.net/projects/nusoap/\"\n      }}>{`http://sourceforge.net/projects/nusoap/`}</a>{`. While calls to the cURL classes are not made explicitly in the example code, the cURL PHP extension is required for NuSOAP to make a connection over SSL.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<?\nrequire_once \"nusoap/nusoap.php\";\n/**\n* @file\n* Example code to access the Marketing Cloud Administration web services\n* and retrieve the current token count.\n*\n* @author Omniture <clientcare@omniture.com>\n* @copyright 2006 - 2010 Omniture, Inc. All Rights Reserved\n*/\n// reference the downloaded WSDL\ndefine('WSDL_DOCUMENT', \"./omniture_wsdl.xml\");\n\n// seed random\nlist($usec, $sec) = explode(' ', microtime());\nsrand((float) $sec + ((float) $usec * 100000));\n\n// SOAP login credentials\n$username = '';\n$secret = '';\nfunction get_header($username, $secret)\n{\n   // Create a unique identifier, or nonce.\n   // This example is used for simplicity in demonstration. Use a method\n   // that guarantees uniqueness in a production environment.\n   $nonce = md5(rand());\n   $created = date(\"Y-m-d H:i:s\");\n   $combo_string = $nonce . $created . $secret;\n\n   // The sha1 command is not available in all versions of PHP.\n   // If your version of PHP does not support this command, use\n   //openssl directly with the command:\n   // echo -n <string> | openssl dgst -sha1\n   $sha1_string = sha1($combo_string);\n   $password = base64_encode($sha1_string);\n   \n   $headers = '<wsse:Security SOAP-ENV:mustUnderstand=\"1\">\n      <wsse:UsernameToken wsu:Id=\"User\">\n         <wsse:Username>'.$username.'</wsse:Username>\n         <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">'.$password.'</wsse:Password>\n         <wsse:Nonce>'.$nonce.'</wsse:Nonce>\n         <wsu:Created>'.$created.'</wsu:Created>\n      </wsse:UsernameToken>\n   </wsse:Security>';\n   return $headers;\n}\n\n// Create nuSOAP client\n$client = new nusoap_client(WSDL_DOCUMENT, TRUE);\n\n// handle client setup error\nif($err = $client->getError()) {\n   echo \"ERROR:\".$err.\"\\\\n\";\n   exit();\n}\n\n// call web services function\n$result = $client->call('Company.GetTokenCount', // function name\n  array('auth_key' => $username), // parameters\n  'http://omniture.com', // namespace\n  '', // SOAP Action\n  get_header($username, $secret)); // security header\n\n// Display results\necho \"RESULTS:\\\\n\";\nprint_r($result);\necho \"\\\\n\";\n?>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}