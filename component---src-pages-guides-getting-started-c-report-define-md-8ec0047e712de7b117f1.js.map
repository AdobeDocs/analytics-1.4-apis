{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_report_define.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,sCADR,wCAGA,0IACA,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAvB,uBAAnB,kGAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAvB,sBAAnB,yEAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAvB,wBAAnB,2DACA,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAnB,SAAnB,+RAGJ,4RACA,iEAAkD,uBAAYA,WAAW,KAAvB,sBAAlD,oFACA,4FACA,oBACE,eAAIA,WAAW,MAAf,gBAAoC,uBAAYA,WAAW,MAAvB,iBAApC,uDACA,eAAIA,WAAW,MAAf,+BACA,eAAIA,WAAW,MAAf,iCAEF,0BAAW,uBAAYA,WAAW,KAAvB,iBAAX,8HAAkM,uBAAYA,WAAW,KAAvB,UAAlM,SAA6P,uBAAYA,WAAW,KAAvB,YAA7P,gEAAiX,uBAAYA,WAAW,KAAvB,UAAjX,gPACA,uBAAQ,mBAAQA,WAAW,KAAnB,QAAR,4EAA4H,uBAAYA,WAAW,KAAvB,iBAA5H,yHACA,0BAAW,uBAAYA,WAAW,KAAvB,sBAAX,wBAAiG,uBAAYA,WAAW,KAAvB,qBAAjG,+CAA6M,uBAAYA,WAAW,KAAvB,uBAA7M,0LACA,iEAAkD,cAAGA,WAAW,IAC5D,KAAQ,+CADsC,gCAAlD,MAGA,mBAAG,mBAAQA,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,+sDA6CL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,msDA8BL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,6+CA+BL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,+BAD6C,4BAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-report-define-md-8ec0047e712de7b117f1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-1-define-and-queue-the-report\"\n    }}>{`Step 1: Define and Queue the Report`}</h1>\n    <p>{`The first step in creating a report is to determine the report type. The Reporting API provides three report types:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Report.QueueTrended`}</inlineCode>{` for reports based on a single element and one or more metrics that are broken down by time.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Report.QueueRanked`}</inlineCode>{` for reports based on one or more elements and one or more metrics.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Report.QueueOvertime`}</inlineCode>{` for one or more metrics that are broken down by time.`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note:`}</strong>{` A report that is broken down by time signifies that you must specify the date granularity parameter. As a result, a ranked report will give you all the metrics for the complete date range whereas the trended report will give you metrics for time slices throughout the date range.`}</p>\n      </li>\n    </ul>\n    <p>{`The JJ. Esquire demo application needs a report based on an element `}{`(`}{`brand`}{`)`}{` and a single metric `}{`(`}{`revenue`}{`)`}{`. The brand is a classification of the base element `}{`(`}{`product`}{`)`}{` and you must specify both for the report to run correctly.`}</p>\n    <p>{`For the demo application, you will use the `}<inlineCode parentName=\"p\">{`Report.QueueRanked`}</inlineCode>{` as the report type since you do not need the report to be broken down by time.`}</p>\n    <p>{`The following code shows you how to define the filters on the report:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Specify the `}<inlineCode parentName=\"li\">{`reportSuiteID`}</inlineCode>{`, date and locale parameters as report description`}</li>\n      <li parentName=\"ol\">{`Specify the metric filters`}</li>\n      <li parentName=\"ol\">{`Specify the element filters`}</li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`reportSuiteID`}</inlineCode>{` parameter references the unique identifier for the report suite to run the report. The date parameter, or its associated `}<inlineCode parentName=\"p\">{`dateTo`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dateFrom`}</inlineCode>{` parameters, define the date range for the report data. The `}<inlineCode parentName=\"p\">{`locale`}</inlineCode>{` parameter specifies the language locale for the report and affects some of the meta text that is displayed in a report. For example, the friendly names of the standard metrics get localized when you change the value of this parameter.`}</p>\n    <p>{` `}<strong parentName=\"p\">{`Note`}</strong>{`: You may need to ask your Adobe Experience Cloud administrator for the `}<inlineCode parentName=\"p\">{`reportSuiteID`}</inlineCode>{`. For this JJ. Esquire demo application code, you should use the same report suite ID that you defined during setup.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Report.QueueRanked`}</inlineCode>{` method accepts the `}<inlineCode parentName=\"p\">{`reportDescription`}</inlineCode>{` object as its one parameter and returns a `}<inlineCode parentName=\"p\">{`reportQueueResponse`}</inlineCode>{` object that includes the report status, and the new report ID. You must place the report ID in a variable so that you can reference it later to retrieve the report status and data.`}</p>\n    <p>{`For more information on these classes, see `}<a parentName=\"p\" {...{\n        \"href\": \"../reporting-api-1.3/overview/c_Overview.md\"\n      }}>{`Analytics Reporting Overview`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n/* Status codes returned by the GetReport/GetStatus request */\n$REPORT_STATUS_NOT_READY = 'not ready';\n$REPORT_STATUS_QUEUED = 'queued';\n$REPORT_STATUS_DONE = 'done';\n\n$max_report_checks = 500; // ULTIMATE SYSTEM MAXIMUM CHECKS ON THE REPORT QUEUE\n$rsId = 'your report suite id',\n\n/* Set the params array */\n$params = array(    'reportDescription' => array(\n    'reportSuiteID' => $rsId, // the report suite id\n    'date' => '2010-12-15', // the date of the report, format YYYY-MM-DD or YYYY-MM or YYYY\n    'dateFrom' => '', // the start date of the report range, format YYYY-MM-DD\n    'dateTo' => '', //  the end date of the report range, format YYYY-MM-DD\n    'dateGranularity' => '', // granularity, this only applies to Overtime and Trended reports  (day, hour, etc.)\n    'metrics' => array( array('id'=>'totalRevenue') ), // metrics\n    'elements' => array( array(\n             'id'=>'product',\n             'classification'=>'brand',\n             'top' => '10'\n     ) ), // elements, elements don't apply to Overtime reports\n    'sortBy'=> '', // sortBy\n    'locale' => 'en_US'\n        )\n);\n/* The API method determining which type of report to queue. */\n/* There are 3 types of reports (Report.QueueOvertime, Report.QueueTrended, Report.QueueRanked)) */\n$report_type = 'Report.QueueRanked';\n\n/* Queue the request */\n$response = sendRequest( $report_type, $params);\n\n/* Check for a valid request reponse */\n$queue = -1;\nif($response['status'] === $REPORT_STATUS_QUEUED)\n{\n    /* Save the queue ID */\n    $queue = $response['reportID'];\n          var_dump($queue);\n} else {\n    throw new Exception('rp_queueAndGetReport(): ' . $response['status'] . ' - '. $response['statusMsg'], 0);\n}\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Create a reportDescription object to set all properties on */\nReportDescription reportDescription = new ReportDescription();\nreportDescription.setReportSuiteID(\"<Your report suit ID>\");\n/* The date for which you want to run the report. */\nreportDescription.setDate(\"2010-12-15\");\nreportDescription.setLocale(ReportDefinitionLocale.en_US);\nreportDefinitionMetric reportDefinitionMetric = new ReportDefinitionMetric();\n\n/* Set the metric to totalRevenue - look at this link for options - https://github.com/Adobe-Experience-Cloud/analytics-1.4-apis/blob/main/src/pages/guides/reporting-api-1.3/reference/r_metrics.md */\nreportDefinitionMetric.setId(\"totalRevenue\");\nReportDefinitionMetric[] metrics = { reportDefinitionMetric };\nreportDescription.setMetrics(metrics);\nReportDefinitionElement reportDefinitionElement = new ReportDefinitionElement();\n\n/* Set the element to product to pull a product report - look at this link for options  - https://github.com/Adobe-Experience-Cloud/analytics-1.4-apis/blob/main/src/pages/guides/reporting-api-1.3/reference/r_elements.md */\nreportDefinitionElement.setId(\"product\");\n\n/* This sets the classification to Brand to pull a classified report of Brand in Products. */\nreportDefinitionElement.setClassification(\"brand\");\nreportDefinitionElement.setTop(10);\nReportDefinitionElement[] elements = { reportDefinitionElement };\nreportDescription.setElements(elements);\n\n/* The API method determining which type of report to queue, there are 3 types of reports (Overtime, Trended, Ranked) */\nReportQueueResponse response = port.reportQueueRanked(reportDescription);\n\n/* Store the report response in reportID variable */\nint reportID = response.getReportID();\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`C`}{`#`}{` Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/* Create a reportDescription object to set all properties on */\n reportDescription rd = new reportDescription();\n       rd.reportSuiteID = \"<Your report suit ID>\";\n       rd.date = \"2011-1-18\";\n     \n       rd.metrics = new reportDefinitionMetric[1];\n       rd.metrics[0] = new reportDefinitionMetric();\n /* Set the metric to totalRevenue - look at this link for options -    \n    https://github.com/Adobe-Experience-Cloud/analytics-1.4-apis/blob/master/src/pages/guides/reporting-api-1.3/reference/r_metrics.md */\n       rd.metrics[0].id = \"totalRevenue\";\n      \n       rd.elements = new reportDefinitionElement[1];\n       rd.elements[0] = new reportDefinitionElement();\n        /* Set the element to product to pull a product report - look at this link for \n         options  - \n         https://github.com/Adobe-Experience-Cloud/analytics-1.4-apis/blob/main/src/pages/guides/reporting-api-1.3/reference/r_elements.md */\n       rd.elements[0].id = \"product\";\n\n/* This sets the classification to Brand to pull a classified report of Brand in Products. */\n       rd.elements[0].classification = \"brand\";\n       rd.locale = reportDefinitionLocale.en_US;\n\n       Console.WriteLine(\"Queuing report...\");\n\n/* The API method determining which type of report to queue, there are 3 types of reports (Overtime, Trended, Ranked) */\n       reportQueueResponse response = client.ReportQueueRanked(rd);\n\n/* Store the report response in reportID variable */\nint reportID = response.reportID;\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_Reporting_API_Tutorial.md\"\n      }}>{`Reporting API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}