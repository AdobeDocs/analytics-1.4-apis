{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/data-sources-api/c_sample_code.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,eADR,gBAGA,gGACA,6LACA,mBAAG,mBAAQC,WAAW,KAAnB,SAAH,wKACA,qBAAK,iBAAMA,WAAW,OAAjB,y+EA2EL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,6BAD6C,8BAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-data-sources-api-c-sample-code-md-53d75d10a7566d6657d0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sample-code\"\n    }}>{`Sample Code`}</h1>\n    <p>{`This sample code demonstrates a basic Data Sources interaction using PHP.`}</p>\n    <p>{`While your Data Sources code would be significantly more complex, this example displays the primary components and their interactions in the Data Sources environment.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` Do not copy and paste this code and expect a functional Data Sources interaction. There are generic values and static data throughout this example for simplicity.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`<?php\n\nrequire_once 'nusoap.php';\n\ndefine( 'WSDL_DOCUMENT', 'omnitureAPI.wsdl' );\n\n// This is the data to be sent.  It will be formatted into XML below.\n// In a typical situation this data would be read from some other location, like a database or file.\n$columnNames = array( 'date', 'evar 1', 'event 2' );\n$rows = array (\n    array ( '1/1/2009', 'product1', '2.50' ),\n    array ( '1/2/2009', 'product2', '4.25' ),\n    array ( '1/3/2009', 'product3', '3.75' )\n);\n\n// Seed the number generator\nlist( $usec, $sec ) = explode( ' ', microtime() );\nsrand( (float)$sec + ((float)$usec * 100000) );\n\n// SOAP login credentials\n$rsid = 'myReportSuiteID';\n$dsid = 'myDataSourceID';\n$username = 'myUserName';\n$secret = 'mySecret';\n\n// Returns the security header\nfunction GetHeader ( )\n{   \n    // Create a unique identifier (a.k.a. nonce).\n    // This example is used for simplicity in demonstration.\n    // Use a method that guarantees uniqueness in a production environment.   \n    global $username;\n    global $secret;\n\n    $nonce = md5( rand() );\n    $created = date( \"Y-m-d H:i:s\" );\n    $comboString = $nonce . $created . $secret;\n    $sha1String = sha1( $comboString );\n    $password = base64_encode( $sha1String );\n    $header =     '<wsse:Security SOAP-ENV:mustUnderstand=\"1\">\n                    <wsse:UsernameToken wsu:Id=\"User\">\n                        <wsse:Username>'.$username.'</wsse:Username>\n                        <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">'.$password.'</wsse:Password>\n                        <wsse:Nonce>'.$nonce.'</wsse:Nonce>\n                        <wsu:Created>'.$created.'</wsu:Created>\n                    </wsse:UsernameToken>\n                </wsse:Security>';\n\n    return $header;\n}\n\n// Gather function parameters\n$params = array (\n     'reportSuiteID' => $rsid,\n     'dataSourceID' => $dsid,\n     'blockName' => 'myTestFile',\n     'columnNames' => $columnNames,\n     'rows' => $rows,\n     'endOfBlock' => TRUE\n);\n\n// Create nuSOAP client\n// nusoap.php's soapclient class cannot co-exist with the PHP 5 soapclient. You must\n// rename it to something else.\n$client = new nusoapclient( WSDL_DOCUMENT, TRUE );\n\n// Call Omniture Web services function\n$result = $client->call( 'DataSource.BeginDataBlock', $params, 'http://omniture.com', '', GetHeader() );\n   \n// Display results\necho \"RESULTS:\\\\n\";\nprint_r( $result );\necho \"\\\\n\";\n?>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_data_sources_api_1_3.md\"\n      }}>{`Data Sources Version 1.3`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}