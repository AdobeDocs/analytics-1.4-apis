{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_report_status.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,kCADR,oCAGA,8GACA,qHAAsG,uBAAYC,WAAW,KAAvB,sBAAtG,2GACA,0FACA,mBAAG,mBAAQA,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,6wEA2EL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,q4BA2BL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,szBA0BL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,+BAD6C,4BAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-report-status-md-36c8b58fdaf65ef0b868.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-2-check-the-report-status\"\n    }}>{`Step 2: Check the Report Status`}</h1>\n    <p>{`All of the report queuing methods place the defined report into a queue for processing.`}</p>\n    <p>{`You can check the status of the report in the processing queue by passing the report ID to the `}<inlineCode parentName=\"p\">{`report.GetStatus()`}</inlineCode>{` method. The method will return a structure containing status information for the specified report ID.`}</p>\n    <p>{`The status will be “done” when the report is ready to be retrieved.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/**\n*  1.Repeatedly check on request in the queue (using Report.GetStatus)\n*      a) check frequency based on $max_checks and $check_wait_seconds \n*  2.Returns the report when ready\n*/  \n$attempts = 0;\n$nextSleepSeconds = 0;\n$max_checks=20;\n$check_wait_seconds=2;\n$reportDone = false;\nwhile( $nextSleepSeconds = nextSleep( $attempts, $max_checks, $check_wait_seconds) )\n{\n    if($debug) echo(\"sleeping for... $nextSleepSeconds seconds.\\\\n\");\n    sleep($nextSleepSeconds);        \n\n    if($debug) echo(\"Checking on queue: $queue (\" . date(\"H:i:s\") . \")\\\\n\");\n\n    /* Check the status */\n    $status = rp_getStatus($queue);\n    \n    /* Check if the report is ready */\n    if($debug) echo(\"Request Status: \". $status .\"\\\\n\");\n    if($status == $REPORT_STATUS_DONE)\n    {\n /* Report is ready */\n     $reportDone = true;\n     break;          \n  \n    } else if( strstr($status, 'fail') || strstr($status, 'error') ){\n       /* Report failed, exit out */     \nthrow new Exception(\"rp_queueAndGetReport(): \" . $status );//. \" - \". $response['error_msg'], 0);                    \n    } else {\n /* Report not ready yet */\n     if($debug) echo $status . \"\\\\n\";\n    }\n    $attempts++;\n}\n\n/**\n *  Does a token free status check on a single report\n *  @returns string status\n */                   \nfunction rp_getStatus($reportID){\n    $response = sendRequest('Report.GetStatus',array('reportID' => $reportID));\n    return $response['status'];\n}\n\n/**\n * Determines next sleep time for report queue checking.\n * Uses a backing off algorithm so that long requests don't have to check as often.\n\n *\n * @param    $attempts     int    The number of checks so far\n * @param    $max_checks   int User specified maximum number of checks\n *\n * @return    FALSE to stop checking OR the number of seconds for the next sleep\n */\nfunction nextSleep( $attempts, $max_checks, $check_wait_seconds ){\n    global $max_report_checks;\n    if( $max_checks <= 0){\n     if($attempts >= $max_report_checks)\n         return -1;  \n     if($attempts <= 4 ){\n         return 3;\n     }else{\n         return min( ($attempts - 4) * 3, 30);           \n     }\n    }else{\n     if($attempts < $max_checks)\n         return $check_wait_seconds;\n    }\n    return FALSE;\n}   \n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Thread.sleep(2000);\n/* Get the report status (using Report.GetStatus) */\nReport_status status = port.reportGetStatus(reportID);\nSystem.out.println(\"Got after reportGetStatus!\"+status);\n\n/* counters for checking status */\nint checkCount = 0;\nint maxChecks = 20;\n\n/* Repeatedly check on request in the queue (using Report.GetStatus) */\nwhile (!status.getStatus().equals(\"done\"))\n{\nSystem.out.println(\"status: \" + status.getStatus());\nif(! status.getStatus().equals(\"done\") && ! \nstatus.getStatus().equals(\"ready\"))\nthrow new Exception(\"Unexpected status: \" + status.getStatus() +    \", \" + status.getError_msg());\n\ncheckCount++;\n    if(checkCount >= maxChecks)\n    throw new Exception(\"Report timeout: report hasn't returned after \" + maxChecks + \"checks\");\n\nstatus = port.reportGetStatus(reportID);\n    if(!status.getStatus().equals(\"done\"))\n    Thread.sleep(2000);\n}\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`C`}{`#`}{` Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Thread.Sleep(5000);\n\n/* Get the report status (using Report.GetStatus) */\n       report_status status = client.ReportGetStatus(response.reportID);\n\n/* counters for checking status */\nint checkCount = 0;\nint maxChecks = 20;\n\n/* Repeatedly check on request in the queue (using Report.GetStatus) */\nwhile (status.status != \"done\")\n{\n    Console.WriteLine(\"status: \" + status.status);\n    if(status.status != \"done\" && status.status != \"ready\")\nthrow new Exception(\"Unexpected status: \" + status.status +     \", \" + status.error_msg);\n\n      checkCount++;\n    if(checkCount >= maxChecks)\n    throw new Exception(\"Report timeout: report hasn't returned after \" + maxChecks + \"checks\");\n\n      status = client.ReportGetStatus(reportID);\n    if(status.status != \"done\")\n    Thread.Sleep(2000);\n}\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_Reporting_API_Tutorial.md\"\n      }}>{`Reporting API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}