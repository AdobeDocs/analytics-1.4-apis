{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/getting-started/c_retrieve_the_report.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,8BADR,gCAGA,kMACA,oJACA,mBAAG,mBAAQC,WAAW,KAAnB,SAAH,iCAA6E,uBAAYA,WAAW,KAAvB,uBAA7E,yJAAqS,cAAGA,WAAW,IAC/S,KAAQ,qCADyR,iDAArS,cAGA,mBAAG,mBAAQA,WAAW,KAAnB,YAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,8/CA6CL,mBAAG,mBAAQA,WAAW,KAAnB,aAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,0jCA+BL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,2pGA+EL,mBAAG,mBAAQA,WAAW,KAAnB,iBAAH,KAAyD,cAAGA,WAAW,IACnE,KAAQ,oCAD6C,iCAO7DJ,EAAWK,gBAAiB","file":"component---src-pages-guides-getting-started-c-retrieve-the-report-md-fc7b2c71ef34b0752c94.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/analytics-1.4-apis/analytics-1.4-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"step-4-retrieve-the-report\"\n    }}>{`Step 4: Retrieve the Report`}</h1>\n    <p>{`As mentioned earlier, this JJ. Esquire demo application uses the REST interface to programmatically retrieve the report. The report data will be available within 72 hours.`}</p>\n    <p>{`The following code creates a connection to the URL where the data is available and prints out the report data to the console.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` In the Java code block, the `}<inlineCode parentName=\"p\">{`getSecurityHeader()`}</inlineCode>{` method constructs the security header for the REST requests. This method is pure Java code that you can review in the solution file provided in the `}<a parentName=\"p\" {...{\n        \"href\": \"c_data_warehouse_API_tutorial.md#\"\n      }}>{`data`}{`_`}{`warehouse`}{`_`}{`API`}{`_`}{`tutorial`}</a>{` section.`}</p>\n    <p><strong parentName=\"p\">{`PHP Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$auth_login = '<your user name>';\n$auth_password = '<your shared secret>'; \nif($reportDone)\n{\n          /* Report has Completed */\n    echo (\"DW report is done. data url= \" . $result['data_url'] . \"\\\\n\");\n    $report = getReportREST($result['data_url']);\n    echo ('The Data Warehouse report: ' . \"\\\\n\" . $report );\n}\n\n/** Use curl to fetch the report from a remote site **/\nfunction getReportREST($url){    \n\n    $curl_handle = curl_init();\n    curl_setopt($curl_handle, CURLOPT_VERBOSE, true);\n    \n    curl_setopt($curl_handle,CURLOPT_URL,$url);\n    $security_headers = array();\n    $security_headers[] = getSecurityHeaderREST();\n    curl_setopt($curl_handle,CURLOPT_HTTPHEADER,$security_headers);\n    curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,true);\n    \n    $result = curl_exec($curl_handle);\n    \n    curl_close($curl_handle);\n    return $result;\n}\n\n/** Format the security header for the REST request **/\nfunction getSecurityHeaderREST(){\n    global $auth_login, $auth_password;    \n    $nonce_part = 0;    \n    // seed random\n    list($usec, $sec) = explode(' ', microtime());\n    $nonce = $nonce_part . '-' . $sec . '-' . $usec ;\n    $created = date('Y-m-d H:i:s');\n    $combo_string = $nonce . $created . $auth_password;\n\n    $sha1_string = sha1($combo_string);\n    $pwDigest = base64_encode($sha1_string);\n\n    return \"X-WSSE: UsernameToken Username=\\\\\"{$auth_login}\\\\\", PasswordDigest=\\\\\"$pwDigest\\\\\", Nonce=\\\\\"$nonce\\\\\", Created=\\\\\"$created\\\\\"\";\n}\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Java Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`if(request.getMessage().equalsIgnoreCase(\"completed\"))\n    {\ntry {\n/* Connect to the URL */\n        URL url = new URL( request.getData_url() );\n        URLConnection connection = url.openConnection();\n        /* Attach the Security Header (X-WSSE) */\n        connection.addRequestProperty(\"X-WSSE\",  getSecurityHeader( \"<your user name>\",\"<your shared secret>\" ));\n        connection.setDoOutput(false);\n         \n        /* Establish an InputStream/BufferedReader to read the report */\n        InputStream in = connection.getInputStream();\n        BufferedReader res = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n         \n                  /* Print each line of the report */\n              String inputLine;\n              while ((inputLine = res.readLine()) != null){\n              System.out.println(inputLine);\n              }\n              res.close();\n         \n        } catch (Exception e) {\n        e.printStackTrace();\n        }\n    }\n    else\n{\n    System.out.println(\"DW Check, message = \" + request.getMessage());\n    }\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`C`}{`#`}{` Code`}</strong>{` `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`if (request.message.Equals(\"Completed\"))\n            {\n                try\n                {\n                    HttpWebResponse statusResponse = null;\n                    string responseXml = \"\";\n\n  /* Define the URL */\n                    StringBuilder sbUrl = new StringBuilder(\"https://api-sbx1.omniture.com/admin/1.2/\" + \"?method=Company.GetTokenCount\");\n\n/* Create the web request to the URL */\n                   HttpWebRequest omniRequest = (HttpWebRequest)WebRequest.Create(request.data_url);\n\n                    /* Generate a timestamp to be used in password creation  */\n                   string timecreated = generateTimestamp();\n                    /* Generate a nonce to be used in password creation */\n                   string nonce = generateNonce();\n                 /* Create a password digest string */\n                   string digest = getBase64Digest(nonce + timecreated + \"<your shared secret>\");\n                    nonce = base64Encode(nonce);\n\n/* Create the security header for the REST call */\n                    omniRequest.Headers.Add(\"X-WSSE: UsernameToken Username=\\\\\"\" + \"<your user name>\" + \"\\\\\", PasswordDigest=\\\\\"\" + digest + \"\\\\\", Nonce=\\\\\"\" + nonce + \"\\\\\", Created=\\\\\"\" + timecreated + \"\\\\\"\");\n                    omniRequest.Method = \"POST\"; omniRequest.ContentType = \"application/x-www-form-urlencoded\";\n                    \n                    try\n                    {\n                      /* Get the response from the request */\n                        statusResponse = (HttpWebResponse)omniRequest.GetResponse();\n\n                        using (Stream receiveStream = statusResponse.GetResponseStream())\n                        {\n                            using (StreamReader readStream = new StreamReader(receiveStream, Encoding.UTF8))\n                            {\n                                   /* Read the response and print it to console */\n                                responseXml = readStream.ReadToEnd();\n                                Console.WriteLine(responseXml);\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        throw new Exception(ex.Message);\n                    }\n\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(\"Exception is: \" + e.Message);\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"DW Check, message = \" + request.message);\n            }\n\n//private functions. \nprivate string generateNonce() \n{ \n    nonce = Encoding.ASCII.GetBytes(DateTime.Now.ToString(\"s\"));\n    return Convert.ToBase64String(nonce);\n} \n\nprivate string generateTimestamp() \n{ \n    return DateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\");\n} \n\nprivate string getBase64Digest(string input) \n{ \n    //Digest = Base64( SHA1( Nonce + CurrentTimestamp + Secret));\n    SHA1 sha = new SHA1Managed();\n    ASCIIEncoding ae = new ASCIIEncoding();\n    byte[] data = ae.GetBytes(input);\n    byte[] digest = sha.ComputeHash(data);\n    return Convert.ToBase64String(digest);\n}\n\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Parent topic:`}</strong>{` `}<a parentName=\"p\" {...{\n        \"href\": \"c_data_warehouse_API_tutorial.md\"\n      }}>{`Data Warehouse API Tutorial`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}